#!/usr/bin/python3

from argparse import Namespace, ArgumentParser, RawDescriptionHelpFormatter
import os
from configparser import ConfigParser
from pathlib import Path
import getpass
import requests
from zipfile import ZipFile
from tempfile import TemporaryDirectory
from lxml import etree
import logging

class BasisWebExport:
    def __init__(self, host: str, user: str, password: str, schemafile: Path = Path(".")) -> None:
        self.host = host.rstrip('/')
        self.session = requests.Session()
        self.session.headers.update(self._token(user, password))
        self.schema = None
        if schemafile == Path("."):  # pathlib default value
            logging.info("No schema file provided, skipping XML validation")
        else:
            if schemafile.exists():
                self.schema = etree.XMLSchema(etree.parse(str(schemafile)))
            else:
                logging.error("Schema file not found: %s", schemafile)

    def _token(self, user: str, password: str) -> dict[str, str]:
        host = self.host + "/landesarchiv/login"
        headers = {"Accept": "text/plain",
                   "Benutzer": user,
                   "Passwort": password}
        token = self.session.post(host, headers=headers)
        logging.debug("Login successful")
        return {"Authorization": "Bearer " + token.text}

    def export(self, prison: str, year: str = None, destdir: Path = Path(".")) -> None:
        host = self.host + "/landesarchiv/export/" + prison
        filename = destdir / (prison + ".zip")
        if year:
            host += "?austrittsjahr=" + year
            filename = filename.with_stem(filename.stem + "-" + year)
        self._download(host, filename)
        _ = self._validate(filename)

    def reexport(self, guid: str, destdir: Path = Path(".")) -> None:
        host = self.host + "/landesarchiv/reexport/" + guid
        filename = destdir / (guid + "_reexport.zip")
        self._download(host, filename)
        _ = self._validate(filename)

    def _download(self, host: str, filename: Path) -> None:
        headers = {"Accept": "application/zip"}
        data = self.session.get(host, headers=headers)
        with open(filename, "wb") as f:
            for c in data.iter_content(chunk_size=128):
                f.write(c)
        logging.info("Exported %s", filename)

    def commit(self, guid: str) -> None:
        host = self.host + "/landesarchiv/commit/" + guid
        self.session.put(host)
        logging.info("Committed %s", guid)

    def _validate(self, zipfile: Path) -> bool:
        self.valid = True
        with TemporaryDirectory() as d:
            with ZipFile(zipfile) as z:
                z.extractall(path=d)
            if self.schema:  # XML validation is optional.
                for f in Path(d).glob("*.xml"):
                    xml = etree.parse(str(f.resolve()))
                    if not self.schema.validate(xml):
                        logging.error("Invalid XML: %s", f)
                        self.valid = False
            xml = etree.parse(str(Path(d) / "rueckgrat.xml"))
            ns = {None: "http://www.basisweb.de/api/landesarchiv/v1"}
            guid = xml.find("//TransaktionsId", ns).text
            files_xml = {x.text for x in xml.findall("//Link", ns)}
            files_zip = {x.name for x in Path(d).glob("*.xml")}
            files_zip.remove("rueckgrat.xml")
            for f in files_xml.difference(files_zip):
                logging.error("Expected but not found in ZIP: %s", f)
                self.valid = False
            for f in files_zip.difference(files_xml):
                logging.error("Unexpected but found in ZIP: %s", f)
                self.valid = False
        if self.valid:
            logging.info("VALID %s %s", guid, zipfile)
        else:
            logging.error("INVALID %s %s", guid, zipfile)
        return self.valid


def get_env() -> Namespace:
    def get_args() -> Namespace:
        parser = ArgumentParser(
            description="Downloader for BASIS-Web archiving",
            formatter_class=RawDescriptionHelpFormatter,
            epilog=examples)
        parser.add_argument("-d", "--dest",
                            type=Path, default=Path("."),
                            metavar="DIR", help="destination directory")
        parser.add_argument("-c", "--config",
                            type=Path, default=Path.home() / ".basiswebdl.ini",
                            metavar="FILE", help="config file")
        parser.add_argument("--host", help="protocol + host + port")
        parser.add_argument("--user", help="user name")
        parser.add_argument("--password", help="password")
        parser.add_argument("--noproxy", action="store_true",
                            help="don't use the system proxy")
        parser.add_argument("--schema", type=Path,
                            help="XML schema used for validation")
        parser.add_argument("--loglevel",
                            choices=("ERROR", "WARNING", "INFO", "DEBUG"),
                            help="log level (default ERROR)")
        subparsers = parser.add_subparsers()
        parser_export = subparsers.add_parser(
            "export", help="export data for given prisons and years")
        parser_export.add_argument(
            "export", nargs="+", metavar="PRISON/YEAR",
            help="list of prison numbers and years")
        parser_reexport = subparsers.add_parser(
            "reexport", help="reexport data for given transactions")
        parser_reexport.add_argument(
            "reexport", nargs="+", metavar="UUID", help="transaction ID")
        parser_commit = subparsers.add_parser(
            "commit", help="commit given transactions")
        parser_commit.add_argument(
            "commit", nargs="+", metavar="UUID", help="transaction ID")
        return parser.parse_args()

    examples = """examples:
    basiswebdl export 512 514 2010
    basiswebdl reexport 9ce73892-226f-11eb-ac3d-005056871b7c
    basiswebdl commit a3609a2e-226f-11eb-abdf-005056871b7c
    basiswebdl --host https://10.10.10.10:8443
               --user alice
               --password '!@#42'
               --noproxy
               --schema basisweb.xsd
               --loglevel INFO
               export 512
    basiswebdl --config ./basiswebdl.ini export 512
    """

    def get_conf(filepath: Path) -> ConfigParser:
        conf = ConfigParser()
        conf.read_dict({
            "connection": {
                "host": "http://localhost:80",
                "user": getpass.getuser(),
                "password": "",
                "noproxy": False
                },
            "validation": {
                "schema": "",
                "loglevel": "ERROR"
                }
            })
        conf.read(filepath)
        return conf

    def merge_args_with_conf(args: Namespace, conf: ConfigParser) -> Namespace:
        env = args
        if not env.host:
            env.host = conf["connection"]["host"]
        if not env.user:
            env.user = conf["connection"]["user"]
        if not env.password:
            env.password = conf["connection"]["password"]
        if not env.noproxy:  # i.e., not set via --noproxy
            env.noproxy = conf["connection"].getboolean("noproxy")
        if not env.schema:
            env.schema = Path(conf["validation"]["schema"])
        if not env.log:
            env.log = conf["validation"]["loglevel"]
        return env

    def parse_exportlist(export: list[str]) -> tuple[list[str], list[str], list[str]]:
        prisons = []
        years = []
        errors = []
        for word in export:
            length = len(word)
            if length == 3:
                prisons.append(word)
            elif length == 4:
                years.append(word)
            else:
                errors.append(word)
        return (prisons, years, errors)

    args = get_args()
    conf = get_conf(args.config)
    env = merge_args_with_conf(args, conf)
    if hasattr(env, "export"):
        env.export = parse_exportlist(env.export)
    return env


if __name__ == "__main__":
    env = get_env()
    if env.noproxy:
        os.environ["no_proxy"] = "*"
    logging.basicConfig(format="%(levelname)s: %(message)s",
                        level=env.loglevel)
    bw = BasisWebExport(env.host, env.user, env.password, env.schema)
    if hasattr(env, "export"):
        (prisons, years, errors) = env.export
        for e in errors:
            logging.error("ignored value %s - neither prison nor year", e)
        if not years:
            for p in prisons:
                bw.export(p, destdir=env.dest)
        else:
            for (p, y) in [(p, y) for p in prisons for y in years]:
                bw.export(p, year=y, destdir=env.dest)
    if hasattr(env, "reexport"):
        for guid in env.reexport:
            bw.reexport(guid, destdir=env.dest)
    if hasattr(env, "commit"):
        for guid in env.commit:
            bw.commit(guid)
